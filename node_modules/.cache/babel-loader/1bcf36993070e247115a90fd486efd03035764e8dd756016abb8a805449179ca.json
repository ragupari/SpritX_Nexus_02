{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varun\\\\Desktop\\\\SpiritX_1\\\\client\\\\src\\\\PlayerDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlayerDetails() {\n  _s();\n  const [player, setPlayer] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPlayerData = async () => {\n      try {\n        const response = await fetch('https://api.example.com/players/1'); // URL of your API\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setPlayer(data);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error.message);\n        setIsLoading(false);\n      }\n    };\n    fetchPlayerData();\n  }, []); // The empty array ensures this effect runs only once after the initial render\n\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 27\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error loading player: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Player Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), player ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: player.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Team: \", player.team]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Position: \", player.position]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of Goals: \", player.goals]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No player data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n_s(PlayerDetails, \"2cMC829Gy/9x0mwO9ewR5hcBsww=\");\n_c = PlayerDetails;\nexport default PlayerDetails;\nvar _c;\n$RefreshReg$(_c, \"PlayerDetails\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PlayerDetails","_s","player","setPlayer","isLoading","setIsLoading","error","setError","fetchPlayerData","response","fetch","ok","Error","status","data","json","message","children","fileName","_jsxFileName","lineNumber","columnNumber","name","team","position","goals","_c","$RefreshReg$"],"sources":["C:/Users/varun/Desktop/SpiritX_1/client/src/PlayerDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction PlayerDetails() {\r\n    const [player, setPlayer] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchPlayerData = async () => {\r\n            try {\r\n                const response = await fetch('https://api.example.com/players/1'); // URL of your API\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                setPlayer(data);\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                setError(error.message);\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchPlayerData();\r\n    }, []); // The empty array ensures this effect runs only once after the initial render\r\n\r\n    if (isLoading) return <p>Loading...</p>;\r\n    if (error) return <p>Error loading player: {error}</p>;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Player Details</h1>\r\n            {player ? (\r\n                <div>\r\n                    <h2>{player.name}</h2>\r\n                    <p>Team: {player.team}</p>\r\n                    <p>Position: {player.position}</p>\r\n                    <p>Number of Goals: {player.goals}</p>\r\n                </div>\r\n            ) : (\r\n                <p>No player data available.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}